#!/usr/local/bin/cbsd
#v13.1.0
MYARG="mode"
MYOPTARG="dryrun"
MYDESC="Upgrade MyB/ClonOS via pkg"
ADDHELP="
 dryrun             - (1 - default ) chech for updates only;
 mode=list          - list current packages;
 mode=check_upgrade - dryrun/show available updates;
 mode=upgrade       - upgrade;

"

. ${subr}
dryrun=1
. ${cbsdinit}
. ${system}

[ ! -r /root/bin/upgrade.sh ] && err 1 "${W1_COLOR}${CBSD_APP}: ${N1_COLOR}no such script: ${N2_COLOR}/root/bin/upgrade.sh${N0_COLOR}"

upgrade_packages()
{
	case "${dryrun}" in
		1)
			/root/bin/upgrade.sh
			;;
		0)
			#/root/bin/upgrade.sh start
			# CBSD QUEUE
			if [ "${mod_cbsd_queue_enabled}" = "YES" -a -z "${MOD_CBSD_QUEUE_DISABLED}" ]; then
				readconf cbsd_queue.conf
				if [ -z "${cbsd_queue_backend}" ]; then
					MOD_CBSD_QUEUE_DISABLED="1"
				else
					[ -n "${cbsd_jail_queue_name}" ] && ${cbsd_queue_backend} cbsd_queue_name=${cbsd_settings_queue_name} id=update cmd=update status=1 workdir="${workdir}" jname="0" data_msg="starting..."
				fi
			fi

			echo "Upgrade in progress..."
			for i in $( seq 1 5 ); do
				echo "Phase ${i}..."
				if [ "${mod_cbsd_queue_enabled}" = "YES" -a -z "${MOD_CBSD_QUEUE_DISABLED}" ]; then
					if [ -z "${cbsd_queue_backend}" ]; then
						MOD_CBSD_QUEUE_DISABLED="1"
					else
						p=$(( 15 * i ))
						[ -n "${cbsd_jail_queue_name}" ] && ${cbsd_queue_backend} cbsd_queue_name=${cbsd_settings_queue_name} id=update cmd=update status=${p} workdir="${workdir}" jname="0" data_msg="update phase ${i}/5.."
					fi
			fi
				sleep 1
			done
#			[ -r /var/spool/myb/state.conf ] && ${RM_CMD} -f /var/spool/myb/state.conf
#			[ -r /var/spool/myb/last_result.txt ] && ${RM_CMD} -f /var/spool/myb/last_result.txt

#			/root/bin/upgrade.sh

			if [ "${mod_cbsd_queue_enabled}" = "YES" -a -z "${MOD_CBSD_QUEUE_DISABLED}" ]; then
				if [ -z "${cbsd_queue_backend}" ]; then
					MOD_CBSD_QUEUE_DISABLED="1"
				else
					[ -n "${cbsd_jail_queue_name}" ] && ${cbsd_queue_backend} cbsd_queue_name=${cbsd_settings_queue_name} id=update cmd=update status=100 workdir="${workdir}" jname="0" data_msg="complete"
				fi
			fi
			;;
		*)
			err 1 "${W1_COLOR}${CBSD_APP}: ${N1_COLOR}unknown dryrun: ${N2_COLOR}${dryrun}${N0_COLOR}"
			;;
	esac
}

list_packages()
{
	local OPATH="${PATH}"
	PATH="/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin"
	[ -z "${PKG_CMD}" ] && PKG_CMD=$( which pkg || which pkg-static )
	PATH="${OPATH}"

	cbsd_ver=$( /usr/local/bin/cbsd version 2>/dev/null | ${AWK_CMD} '{printf $1}' )
	php_ver=$( ${PKG_CMD} info php[0-9][0-9]-[0-9]* 2>/dev/null )
	myb_ver=$( ${PKG_CMD} info myb 2>/dev/null | ${GREP_CMD} ^Version | ${CUT_CMD} -d : -f 2 | ${AWK_CMD} '{printf $1}' )
	clonos_ver=$( ${PKG_CMD} info clonos 2>/dev/null | ${GREP_CMD} ^Version | ${CUT_CMD} -d : -f 2 | ${AWK_CMD} '{printf $1}' )

	cbsd_api=$( ${PKG_CMD} info cbsd-mq-api 2>/dev/null | ${GREP_CMD} ^Version | ${CUT_CMD} -d : -f 2 | ${AWK_CMD} '{printf $1}' )
	cbsd_router=$( ${PKG_CMD} info cbsd-mq-router 2>/dev/null | ${GREP_CMD} ^Version | ${CUT_CMD} -d : -f 2 | ${AWK_CMD} '{printf $1}' )

	[ -n "${cbsd_ver}" ] && echo "CBSD: ${cbsd_ver}"
	[ -n "${cbsd_api}" ] && echo "CBSD API: ${cbsd_api}"
	[ -n "${cbsd_router}" ] && echo "CBSD Router: ${cbsd_router}"
	[ -n "${php_ver}" ] && echo "PHP: ${php_ver}"
	[ -n "${myb_ver}" ] && echo "MyBee: ${myb_ver}"
	[ -n "${clonos_ver}" ] && echo "ClonOS: ${clonos_ver}"
}

case "${mode}" in
	list)
		list_packages
		;;
	upgrade)
		dryrun=0
		upgrade_packages
		;;
	check_upgrade)
		dryrun=1
		upgrade_packages
		;;
	*)
		err 1 "${W1_COLOR}${CBSD_APP}: ${N1_COLOR}unknown mode: ${N2_COLOR}${mode}${N0_COLOR}"
		;;
esac

exit 0
