#!/bin/sh
export PATH="/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin"
#
# /etc/rc.initial
#

unset SOCKS5_PROXY

. /etc/rc.conf
. /etc/rc.subr
export workdir="${cbsd_workdir}"

[ -z "${OSNAME}" ] && OSNAME="MyBee"
[ -n "${SOCKS5_PROXY}" ] && export SOCKS5_PROXY="${SOCKS5_PROXY}"

. /usr/local/cbsd/cbsd.conf
. /usr/local/cbsd/subr/ansiicolor.subr
. /usr/jails/nc.inventory
. /usr/local/cbsd/subr/nc.subr
. /etc/rc.initial.subr
# Make sure the user can't kill us by pressing Ctrl-C
trap : 2
trap : 3
trap : 4
# Make sure the user can't access rootshell by pressing Ctrl-Z
trap : 18

## MAIN
check_tty
hwprobe

# ${myb_version}
if [ -r /usr/local/myb/version ]; then
	. /usr/local/myb/version
fi

[ -z "${myb_version}" ] && myb_version="unknown"
[ -z "${producturl}" ] && producturl="https://mybee.convectix.com"

MYB_SMTP_CONFIG_FILE="/usr/local/etc/smtp.conf"
[ -z "${myb_net_cur_profile}" ] && myb_net_cur_profile="1"

while : ; do
	check_tty
	init_settings

	# exit loop
	[ -r /tmp/stop ] && exit 0
	# re-read ACL on/off, net profile
	. /etc/rc.conf

	[ -r ${MYB_SMTP_CONFIG_FILE} ] && . ${MYB_SMTP_CONFIG_FILE}

	case ${PUB_WL} in
		enabled)
			PUB_WL_COLOR="${H2_COLOR}"
			;;
		disabled)
			PUB_WL_COLOR="${W1_COLOR}"
			;;
	esac
	case ${IP_WL} in
		enabled)
			IP_WL_COLOR="${H2_COLOR}"
			;;
		disabled)
			IP_WL_COLOR="${W1_COLOR}"
			;;
	esac
	case ${API_FQDN} in
		disabled)
			API_FQDN_COLOR="${W1_COLOR}"
			;;
		*)
			API_FQDN_COLOR="${H2_COLOR}"
			;;
	esac

	VPN_COLOR="${H2_COLOR}"
	[ ! -x /root/bin/vpn.sh ] && VPN_COLOR="${DGRAY}"
	PROFILE_COLOR="${H2_COLOR}"
	[ ! -x /root/bin/net_profile.sh ] && PROFILE_COLOR="${DGRAY}"
	TEMPLATE_COLOR="${H2_COLOR}"
	[ ! -x /root/bin/template.sh ] && TEMPLATE_COLOR="${DGRAY}"

	if [ "${SMTP_CONFIGURED}" = "1" ]; then
		SMTP_COLOR="${H2_COLOR}"
		SMTP_STATUS=" configured "
	else
		SMTP_COLOR="${DGRAY}"
		SMTP_STATUS="unconfigured"
	fi

	if [ -n "${SOCKS5_PROXY}" ]; then
		PROXY_ARGS="${H2_COLOR}${SOCKS5_PROXY}${N0_COLOR}"
	fi

	echo
	if [ -n "${myb_build}" ]; then
		echo "Welcome to ${OSNAME} ${myb_version} (build: ${myb_build}) console."
	else
		echo "Welcome to ${OSNAME} ${myb_version} console."
	fi
	echo
	echo -e "    Copyright (c) 2013-2024 CBSD Team"
	echo -e "    Copyright (c) 2019-2024 ${OSNAME} Team"
	echo -e "    ${LCYAN}Visit: $producturl for system updates! ${H3_COLOR}(or type 'u'+Enter)${N0_COLOR}"
	echo
	case "${API_FQDN}" in
		disabled|'')
			echo -e "        API address: ${W1_COLOR}http://${ip4}${N0_COLOR}"
			[ -n "${ip6}" ] && echo -e "        API v6 address: ${W1_COLOR}http://${ip6}${N0_COLOR}"
			;;
		*)
			echo -e "        API address: ${W1_COLOR}http://${ip4} (${H3_COLOR}https://${API_FQDN}${W1_COLOR}) ${N0_COLOR}"
			[ -n "${ip6}" ] && echo -e "        API v6 address: ${W1_COLOR}http://${ip6} (${H3_COLOR}https://${API_FQDN}${W1_COLOR})${N0_COLOR}"
			;;
	esac
	echo -e "        LAN Network IPv4 Address: ${H3_COLOR}${lan_ipv4}${N0_COLOR}"
	if [ -n "${SOCKS5_PROXY}" ]; then
		echo -e "        Proxy enabled: ${PROXY_ARGS}"
	fi
	case "${ttyd_enable}" in
		[Yy][Ee][Ss])
			case "${API_FQDN}" in
				disabled|"")
					echo -e "        Websocket CLI/Shell enabled: ${H3_COLOR}http://${ip4}/shell${NORMAL}"
					;;
				*)
					echo -e "        Websocket CLI/Shell enabled: ${W1_COLOR}http://${ip4}/shell (${H3_COLOR}https://${API_FQDN}/shell${W1_COLOR})${NORMAL}"
					;;
			esac
			;;
	esac

	# display menu
	echo
	echo "Console Menu"
	echo "------------"
	echo -e "${H2_COLOR}1) (Re)Configure Host Network${NORMAL}     ${H2_COLOR}11) Configure Hosts Allow for API ${IP_WL_COLOR}(${IP_WL})${NORMAL}"
	echo -e "${H2_COLOR}2) Reset 'root' user password${NORMAL}     ${H2_COLOR}12) Configure Pubkey WhiteList ${PUB_WL_COLOR}(${PUB_WL})${NORMAL}"
	echo -e "${VPN_COLOR}3) Configure VPN access for API${NORMAL}   ${DGRAY}13) Add cluster node${NORMAL}"
	echo -e "${H2_COLOR}4) Change VM network profile (${myb_net_cur_profile})${NORMAL}  ${H2_COLOR}14) Console Keyboard Map${NORMAL}"
	echo -e "${TEMPLATE_COLOR}5) Install container template${NORMAL}     ${DGRAY}15) NFS/PVC/P9FS shares for VM${NORMAL}"
	echo -e "${H2_COLOR}6) Shell ( warm cloud image )${NORMAL}     ${H2_COLOR}16) Set API FQDN ( + certbot ) ${API_FQDN_COLOR}(${API_FQDN})${NORMAL}"
	echo -e "${H2_COLOR}7) Reboot Server${NORMAL}                  ${H2_COLOR}17) Kubernetes clusters setting${NORMAL}"
	echo -e "${H2_COLOR}8) Shutdown Server${NORMAL}                ${DGRAY}18) ${NORMAL}"
	echo -e "${H2_COLOR}9) Configure SMTP${NORMAL} (${SMTP_COLOR}${SMTP_STATUS}${NORMAL})  ${DGRAY}19) ${NORMAL}"
	echo -e "${H2_COLOR}10) SSH root user: ${myb_ssh_root_ssh}${NORMAL}       ${DGRAY}20) Add cluster node${NORMAL}"
	echo
	echo -e "${H2_COLOR}0) Exit${NORMAL}"
	echo
	read -p "Enter a number:" opmode

	# see what the user has chosen
	case ${opmode} in
		0)
			exit 0
			;;
		1)
			bsdinstall netconfig
			if [ -r /tmp/bsdinstall_etc/resolv.conf ]; then
				cp -a /tmp/bsdinstall_etc/resolv.conf /etc/resolv.conf
			fi
			if [ -r /tmp/bsdinstall_etc/rc.conf.net ]; then
				cut -d "=" -f 1 /tmp/bsdinstall_etc/rc.conf.net | while read _param; do
					grep . /etc/rc.conf > /etc/rc.conf.bak
					# sed 'd
					grep -v ${_param} /etc/rc.conf.bak > /etc/rc.conf
				done
				echo >> /etc/rc.conf
				cat /tmp/bsdinstall_etc/rc.conf.net >> /etc/rc.conf
				echo "reboot the host to apply the changes"
				read p
			fi
		 	;;
		2)
			echo "not implemented yet"
			read p
		 	;;
		3)
			passwd root
			;;
		4)
			/usr/local/bin/cbsd myb_net_profile
			;;
		5)
			/etc/rc.initial.ping
			echo "not implemented yet"
			read p
			;;
		6)
			export PATH=/root/bin:/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin
			export MYB_SUBSHELL=1
			/root/bin/checkiso.sh
			;;
		7)
			/etc/rc.initial.reboot
			;;
		8)
			/etc/rc.initial.halt
			;;
		9)
			/usr/local/bin/cbsd config_smtp
			;;
		10)
			change_sshflags
			;;
		11)
			_editfile=1		# always edit file
			case ${IP_WL} in
				enabled)
					if getyesno "Turn ACL OFF? ('n' or '0' - leave as enabled) "; then
						IP_WL="disabled"
						${LOCKF_CMD} -s -t10 /tmp/sysrc_rc.conf.lock /usr/local/cbsd/misc/cbsdsysrc -qf /etc/rc.conf IP_WL="${IP_WL}" > /dev/null 2>&1
						_editfile=0
						cbsd myb_ip_whitelist mode=off
					fi
					;;
				disabled)
					if getyesno "Turn ACL ON? ('n' or '0' - leave as disabled) "; then
						IP_WL="enabled"
						${LOCKF_CMD} -s -t10 /tmp/sysrc_rc.conf.lock /usr/local/cbsd/misc/cbsdsysrc -qf /etc/rc.conf IP_WL="${IP_WL}" > /dev/null 2>&1
					fi
					;;
			esac
			if [ "${_editfile}" = "1" ]; then
				cbsd myb_ip_whitelist
			fi
		;;
		12)
			_editfile=1		# always edit file
			case ${PUB_WL} in
				enabled)
					if getyesno "Turn Pubkey ACL OFF? ('n' or '0' - leave as enabled) "; then
						PUB_WL="disabled"
						${LOCKF_CMD} -s -t10 /tmp/sysrc_rc.conf.lock /usr/local/cbsd/misc/cbsdsysrc -qf /etc/rc.conf PUB_WL="${PUB_WL}" > /dev/null 2>&1
						${LOCKF_CMD} -s -t10 /tmp/sysrc_rc.conf.lock /usr/local/cbsd/misc/cbsdsysrc -qf /etc/rc.conf cbsd_mq_api_flags="-listen 127.0.0.1:65531" > /dev/null 2>&1
						_editfile=0
						${SERVICE_CMD} cbsd-mq-api restart
					fi
					;;
				disabled)
					if getyesno "Turn Pubkey ACL ON? ('n' or '0' - leave as disabled) "; then
						PUB_WL="enabled"
						${LOCKF_CMD} -s -t10 /tmp/sysrc_rc.conf.lock /usr/local/cbsd/misc/cbsdsysrc -qf /etc/rc.conf PUB_WL="${PUB_WL}" > /dev/null 2>&1
						${LOCKF_CMD} -s -t10 /tmp/sysrc_rc.conf.lock /usr/local/cbsd/misc/cbsdsysrc -qf /etc/rc.conf cbsd_mq_api_flags="-listen 127.0.0.1:65531 -allowlist /usr/local/etc/cbsd-mq-api.allow" > /dev/null 2>&1
						${SERVICE_CMD} cbsd-mq-api restart
					fi
					;;
			esac
			if [ "${_editfile}" = "1" ]; then
				cbsd myb_pub_whitelist
			fi
			;;
		13)
			echo "not implemented yet"
			read p
			;;
		14)
			/usr/sbin/kbdmap
			;;
		16)
			if [ ! -x /usr/local/bin/certbot ]; then
				if getyesno "The system does not have the 'certbot' package. It seems you are running it for the first time. Can I install the necessary software to continue?"; then
					env ASSUME_ALWAYS_YES=yes SIGNATURE_TYPE=none IGNORE_OSVERSION=yes /usr/sbin/pkg install -r MyBee-latest -y py311-certbot
				fi
			fi
			if [ ! -x /usr/local/bin/certbot ]; then
				${ECHO} "${N1_COLOR}error: no such /usr/local/bin/certbot, please install first: py311-certbot"
			else
				_editfile=1		# always edit file
				case ${API_FQDN} in
					disabled)
						if getyesno "Turn API FQDN/certbot ON? ('n' or '0' - leave as disabled) "; then
							cbsd myb_api_fqdn
						fi
						;;
					*)
						if getyesno "Turn API FQDN/certbot OFF? ('n' or '0' - leave as enabled) "; then
							API_FQDN="disabled"
							${LOCKF_CMD} -s -t10 /tmp/sysrc_rc.conf.lock /usr/local/cbsd/misc/cbsdsysrc -qf /etc/rc.conf API_FQDN="${API_FQDN}" > /dev/null 2>&1
							_editfile=0
							cbsd myb_api_fqdn mode=off
						fi
						;;
				esac
			fi
			;;
		17)
			/usr/local/bin/cbsd myb_k8s_settings
			;;
		u)	
			/root/bin/upgrade.sh -c 0 -w 0
			;;
		*)
			;;
	esac
done

exit 0
